/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TodosRouteImport } from './routes/todos'
import { Route as IndexRouteImport } from './routes/index'
import { Route as QEventSlugRouteImport } from './routes/q.$eventSlug'
import { Route as PEventSlugSecretRouteImport } from './routes/p.$eventSlug.$secret'

const TodosRoute = TodosRouteImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const QEventSlugRoute = QEventSlugRouteImport.update({
  id: '/q/$eventSlug',
  path: '/q/$eventSlug',
  getParentRoute: () => rootRouteImport,
} as any)
const PEventSlugSecretRoute = PEventSlugSecretRouteImport.update({
  id: '/p/$eventSlug/$secret',
  path: '/p/$eventSlug/$secret',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/todos': typeof TodosRoute
  '/q/$eventSlug': typeof QEventSlugRoute
  '/p/$eventSlug/$secret': typeof PEventSlugSecretRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/todos': typeof TodosRoute
  '/q/$eventSlug': typeof QEventSlugRoute
  '/p/$eventSlug/$secret': typeof PEventSlugSecretRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/todos': typeof TodosRoute
  '/q/$eventSlug': typeof QEventSlugRoute
  '/p/$eventSlug/$secret': typeof PEventSlugSecretRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/todos' | '/q/$eventSlug' | '/p/$eventSlug/$secret'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/todos' | '/q/$eventSlug' | '/p/$eventSlug/$secret'
  id: '__root__' | '/' | '/todos' | '/q/$eventSlug' | '/p/$eventSlug/$secret'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TodosRoute: typeof TodosRoute
  QEventSlugRoute: typeof QEventSlugRoute
  PEventSlugSecretRoute: typeof PEventSlugSecretRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/todos': {
      id: '/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof TodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/q/$eventSlug': {
      id: '/q/$eventSlug'
      path: '/q/$eventSlug'
      fullPath: '/q/$eventSlug'
      preLoaderRoute: typeof QEventSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/p/$eventSlug/$secret': {
      id: '/p/$eventSlug/$secret'
      path: '/p/$eventSlug/$secret'
      fullPath: '/p/$eventSlug/$secret'
      preLoaderRoute: typeof PEventSlugSecretRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TodosRoute: TodosRoute,
  QEventSlugRoute: QEventSlugRoute,
  PEventSlugSecretRoute: PEventSlugSecretRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
